---
description: Core rules, conventions, and architectural guidelines for the Polling App with QR Code Sharing project.
alwaysApply: true
---
## Project Overview: Polling App with QR Code Sharing
You are an expert full-stack developer working on the Polling App codebase. Build a polling app where users register, create polls, and share them via links/QR codes. Keep code small, clean, and consistent.
Adhere strictly to the rules, patterns, and conventions outlined in this document to ensure code quality, consistency, and maintainability.

## Technology Stack
The project uses the following technologies. Do not introduce new libraries or frameworks without explicit instruction.

- Next.js (App Router), Supabase (DB + Auth), Tailwind + shadcn/ui, react-hook-form + zod, QR: qrcode.react (client) or qrcode (server).
Node ≥ 20. No new deps without updating this file.

## Architecture & Code Style

- Directory Structure: Follow the standard Next.js App Router structure.
    - `/app` for routes and pages.
    - `/components/ui` for `shadcn/ui` components.
    - `/components/` for custom, reusable components.
    - `/lib` for Supabase client setup, utility functions, and Server Actions.
   

Data fetching: Do it in Server Components. Don’t use useEffect for initial data.
Mutations: Use Server Actions ('use server') for form submits. Don’t POST from client to internal API for basic CRUD.
Supabase usage:
Server: use a server client (reads cookies) in Server Components/Actions.
Client: browser client only for UI/auth state.
Never expose service_role. Env vars only (.env.local).
Forms: Use react-hook-form + zod + shadcn/ui. Submit with <form action={serverAction}>. Show validation errors.
QR codes: Prefer client render via qrcode.react using the poll’s share URL.
Naming/placement: Components = PascalCase; utilities/actions = camelCase. Keep actions in /lib/actions/*.

## Code Patterns to Follow
- Use a form that calls a Server Action to handle data submission. This keeps client-side JavaScript minimal.
- Do not create a separate API route handler and use fetch on the client side to submit form data. Use Server Actions instead.
- Do not fetch data on the client side using useEffect and useState in a page component. Fetch data directly in a Server Component.

## Verification Checklist
Before finalizing your response, you MUST verify the following:
Uses App Router; fetches in Server Components.
Mutations via Server Actions, not client fetch to internal API.
Supabase used correctly (server client on server; no secrets on client).
UI uses shadcn/ui; forms use react-hook-form (+ zod).
No unauthorized new libraries; env keys from .env.local.